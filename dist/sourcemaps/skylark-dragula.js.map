{"version":3,"sources":["skylark-dragula.js"],"names":["define","langx","noder","datax","finder","geom","eventer","styler","touch","plugins","dnd","manager","on","off","attr","removeAttr","pagePosition","addClass","height","Draggable","Plugin","inherit","klassName","pluginName","options","draggingClass","forceFallback","_construct","elm","this","overrided","self","forEach","eventName","isFunction","mousy","mousedown","e","handle","dragHandle","target","_elm","closest","source","dragSource","startPos","x","clientX","y","clientY","prepare","mouseup","dragstart","dragging","start","dragend","stop","end","register","Droppable","hoverClass","activeClass","acceptable","dragover","stopPropagation","e2","create","originalEvent","overElm","transfer","draggingTransfer","trigger","preventDefault","dragenter","dragleave","removeClass","drop","events","Emitter","skylark","mouse","getEventHost","targetTouches","length","changedTouches","touchy","el","op","type","fn","touchInited","whichMouseButton","touches","which","buttons","button","getRectWidth","rect","width","right","left","getRectHeight","bottom","top","getCoord","coord","host","missMap","pageX","pageY","helpers","Drake","_source","_item","_initialSibling","_currentSibling","_renderTimer","_copy","_lastDropTarget","_prepareArgs","args","init","containers","destroy","isContainer","indexOf","isCopy","item","container","o","copy","findDropTarget","elementBehindCursor","fromPoint","accepted","parent","droppable","immediate","getImmediateChild","reference","getReference","initial","isInitialPlacement","accepts","s","sibling","nextSibling","dropTarget","horizontal","direction","boundingRect","resolve","inside","len","children","i","outside","after","root","canStart","ignoreInputTextSelection","isInput","invalid","movable","moves","canMove","manualStart","context","cloneNode","emit","over","changed","moved","copySortSource","revertOnSpill","removeChild","insertBefore","cleanup","remove","cancel","revert","reverts","arguments","clearTimeout","DndDraggable","DndDroppable","attach","initialContainers","Array","isArray","always","removeOnSpill","mirrorContainer","body","_context","drake","draggable","preparing","started","ghost","ended","overing","dropped","dragula","main"],"mappings":"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","file":"../skylark-dragula.js","sourcesContent":["define('skylark-domx-plugins-dnd/draggable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-devices-points/touch\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, touch, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n\r\n    var Draggable = plugins.Plugin.inherit({\r\n        klassName: \"Draggable\",\r\n        \r\n        pluginName : \"lark.dnd.draggable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\",\r\n            forceFallback : false\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            self.draggingClass = options.draggingClass;\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n            touch.mousy(elm);\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var options = self.options;\r\n                    if (options.handle) {\r\n                        if (langx.isFunction(options.handle)) {\r\n                            self.dragHandle = options.handle(e.target,self._elm);\r\n                        } else {\r\n                            self.dragHandle = finder.closest(e.target, options.handle,self._elm);\r\n                        }\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (options.source) {\r\n                        if (langx.isFunction(options.source)) {\r\n                            self.dragSource =  options.source(e.target, self._elm);                            \r\n                        } else {\r\n                            self.dragSource = finder.closest(e.target, options.source,self._elm);                            \r\n                        }\r\n                    } else {\r\n                        self.dragSource = self._elm;\r\n                    }\r\n\r\n                    self.startPos = {\r\n                        x : e.clientX,\r\n                        y : e.clientY\r\n                    };\r\n\r\n                    manager.prepare(self,e);\r\n\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    ///if (self.dragSource) {\r\n                    ///    //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    ///    self.dragSource = null;\r\n                    ///    self.dragHandle = null;\r\n                    ///}\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    if (manager.dragging !== self) {\r\n                        return;\r\n                    }\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    if (manager.dragging !== self) {\r\n                        return;\r\n                    }\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    plugins.register(Draggable,\"draggable\");\r\n\r\n    return dnd.Draggable = Draggable;\r\n});\ndefine('skylark-domx-plugins-dnd/droppable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var Droppable = plugins.Plugin.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        pluginName : \"lark.dnd.droppable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = self.options,\r\n                draggingClass = options.draggingClass,\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        originalEvent : e,\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        ///e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        originalEvent : e,\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        originalEvent : e,\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        originalEvent : e,\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false,\r\n                    dragging : e.dragging \r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n    plugins.register(Droppable,\"droppable\");\r\n\r\n    return dnd.Droppable = Droppable;\r\n});\ndefine('skylark-langx-emitter/Emitter',[\r\n    \"skylark-langx-events\"\r\n],function(events){\r\n    return events.Emitter;\r\n});\ndefine('skylark-dragula/_helpers',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-devices-points/mouse\",\r\n  \"skylark-devices-points/touch\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-finder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-styler\"\r\n],function(\r\n  skylark,\r\n  mouse,\r\n  touch,\r\n  noder,\r\n  finder,\r\n  geom,\r\n  eventer,\r\n  styler\r\n ){\r\n    'use strict';\r\n\r\n    function touchy (el, op, type, fn) {\r\n      if (op == \"add\") {\r\n        eventer.on(el,type,fn);\r\n      } else {\r\n        eventer.off(el,type,fn);\r\n      }\r\n\r\n      if (!el.touchInited) {\r\n        el.touchInited = true;   \r\n        touch.mousy(el);     \r\n      }\r\n    }\r\n\r\n    function whichMouseButton (e) {\r\n    \r\n      if (e.touches !== void 0) { return e.touches.length; }\r\n      if (e.which !== void 0 && e.which !== 0) { return e.which; } // see https://github.com/bevacqua/dragula/issues/261\r\n      if (e.buttons !== void 0) { return e.buttons; }\r\n      var button = e.button;\r\n      if (button !== void 0) { // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575\r\n        return button & 1 ? 1 : button & 2 ? 3 : (button & 4 ? 2 : 0);\r\n      }\r\n\r\n    }\r\n\r\n\r\n    \r\n    function getRectWidth (rect) { \r\n      return rect.width || (rect.right - rect.left); \r\n    }\r\n    function getRectHeight (rect) { \r\n      return rect.height || (rect.bottom - rect.top); \r\n    }\r\n\r\n\r\n    function getEventHost (e) {\r\n      // on touchend event, we have to use `e.changedTouches`\r\n      // see http://stackoverflow.com/questions/7192563/touchend-event-properties\r\n      // see https://github.com/bevacqua/dragula/issues/34\r\n      if (e.targetTouches && e.targetTouches.length) {\r\n        return e.targetTouches[0];\r\n      }\r\n      if (e.changedTouches && e.changedTouches.length) {\r\n        return e.changedTouches[0];\r\n      }\r\n      return e;\r\n    }\r\n\r\n    function getCoord (coord, e) {\r\n      var host = getEventHost(e);\r\n      var missMap = {\r\n        pageX: 'clientX', // IE8\r\n        pageY: 'clientY' // IE8\r\n      };\r\n      if (coord in missMap && !(coord in host) && missMap[coord] in host) {\r\n        coord = missMap[coord];\r\n      }\r\n      return host[coord];\r\n    }\r\n\r\n    return {\r\n    \ttouchy,\r\n    \twhichMouseButton,\r\n    \tgetRectWidth,\r\n    \tgetRectHeight,\r\n    \tgetEventHost,\r\n    \tgetCoord\r\n    };\r\n});\ndefine('skylark-dragula/_drake',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx-emitter/Emitter\",\r\n  \"skylark-devices-points/mouse\",\r\n  \"skylark-devices-points/touch\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-finder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-styler\",\r\n  \"./_helpers\"\r\n],function(\r\n  skylark,\r\n  Emitter,\r\n  mouse,\r\n  touch,\r\n  noder,\r\n  finder,\r\n  geom,\r\n  eventer,\r\n  styler,\r\n  helpers\r\n){\r\n    'use strict';\r\n\r\n\r\n    var Drake = Emitter.inherit({\r\n        _source : null,   // source container\r\n        _item : null,     // item being dragged\r\n        _initialSibling : null, // reference sibling when grabbed\r\n        _currentSibling : null, // reference sibling now\r\n        _renderTimer : null, // timer for setTimeout renderMirrorImage\r\n        _copy : null, // item used for copying\r\n        _lastDropTarget : null, // last container item was over\r\n\r\n        _prepareArgs : function(e,args) {\r\n            return args;\r\n        },\r\n        init : function(options) {\r\n            this.containers = options.containers;\r\n            this.destroy = options.destroy;\r\n            this.options = options;\r\n            this.dragging = false;\r\n\r\n        },\r\n\r\n        isContainer : function(el) {\r\n            return this.containers.indexOf(el) !== -1 || this.options.isContainer(el);\r\n        },\r\n   \r\n        isCopy : function  (item, container) {\r\n            var o = this.options;\r\n            return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);\r\n        },\r\n\r\n\r\n        findDropTarget : function  (clientX, clientY) {\r\n            var elementBehindCursor  = noder.fromPoint(clientX, clientY),\r\n                target = elementBehindCursor,\r\n                self = this;\r\n\r\n            while (target && !accepted()) {\r\n              target = finder.parent(target);\r\n            }\r\n\r\n            return target;\r\n\r\n            function accepted () {\r\n              var droppable = self.isContainer(target);\r\n              if (droppable === false) {\r\n                return false;\r\n              }\r\n\r\n              var immediate = self.getImmediateChild(target, elementBehindCursor);\r\n              var reference = self.getReference(target, immediate, clientX, clientY);\r\n              var initial = self.isInitialPlacement(target, reference);\r\n              if (initial) {\r\n                return true; // should always be able to drop it right back where it was\r\n              }\r\n              return self.options.accepts(self._item, target, self._source, reference);\r\n            }\r\n        },\r\n\r\n        isInitialPlacement : function  (target, s) {\r\n            var sibling;\r\n            if (s !== void 0) {\r\n              sibling = s;\r\n            ///} else if (_mirror) {\r\n            ///  sibling = _currentSibling;\r\n            } else {\r\n              sibling = finder.nextSibling(this._copy || this._item);\r\n            }\r\n            return target === this._source && sibling === this._initialSibling;\r\n        },\r\n\r\n        getReference : function(dropTarget, target, x, y) {\r\n            var o = this.options;\r\n\r\n            var horizontal = o.direction === 'horizontal';\r\n\r\n            if (target !== dropTarget) {\r\n                return inside();\r\n            }  else {\r\n                return  outside();\r\n            }\r\n\r\n            return reference;\r\n\r\n            function outside () { // slower, but able to figure out any position\r\n              var len = dropTarget.children.length;\r\n\r\n              for (let i = 0; i < len; i++) {\r\n                let el = dropTarget.children[i];\r\n                //rect = el.getBoundingClientRect();\r\n                let rect = geom.boundingRect(el);\r\n                if (horizontal && (rect.left + rect.width / 2) > x) { return el; }\r\n                if (!horizontal && (rect.top + rect.height / 2) > y) { return el; }\r\n              }\r\n              return null;\r\n            }\r\n\r\n\r\n            function inside () { // faster, but only available if dropped inside a child element\r\n              \r\n              //var rect = target.getBoundingClientRect();\r\n              var  rect = geom.boundingRect(target);\r\n              if (horizontal) {\r\n                return resolve(x > rect.left + helpers.getRectWidth(rect) / 2);\r\n              }\r\n              return resolve(y > rect.top + helpers.getRectHeight(rect) / 2);\r\n              \r\n            }\r\n\r\n            function resolve (after) {\r\n              return after ? finder.nextSibling(target) : target;\r\n            }\r\n        },\r\n\r\n\r\n        getImmediateChild :   function(dropTarget, target) {\r\n            var immediate = target;\r\n            while (immediate !== dropTarget && finder.parent(immediate) !== dropTarget) {\r\n              immediate = finder.parent(immediate);\r\n            }\r\n            if (immediate === noder.root()) {\r\n              return null;\r\n            }\r\n            return immediate;\r\n        },\r\n\r\n        canStart : function (item) {\r\n            ///if (drake.dragging && _mirror) {\r\n            if (this.dragging) {\r\n              return;\r\n            }\r\n            if (this.isContainer(item)) {\r\n              return; // don't drag container itself\r\n            }\r\n\r\n            if (this.options.ignoreInputTextSelection) {\r\n                ///var clientX = getCoord('clientX', e);\r\n                ///var clientY = getCoord('clientY', e);\r\n                /////var elementBehindCursor = doc.elementFromPoint(clientX, clientY);\r\n                ///var elementBehindCursor = noder.fromPoint(clientX,clientY);\r\n                ///if (noder.isInput(elementBehindCursor)) {\r\n                if (noder.isInput(item)){\r\n                    return;\r\n                }\r\n            }\r\n\r\n\r\n            var handle = item;\r\n            var o = this.options;\r\n            while (finder.parent(item) && this.isContainer(finder.parent(item)) === false) {\r\n              if (o.invalid(item, handle)) {\r\n                return;\r\n              }\r\n              item = finder.parent(item); // drag target should be a top element\r\n              if (!item) {\r\n                return;\r\n              }\r\n            }\r\n            var source = finder.parent(item);\r\n            if (!source) {\r\n              return;\r\n            }\r\n            if (o.invalid(item, handle)) {\r\n              return;\r\n            }\r\n\r\n            var movable = o.moves(item, source, handle, finder.nextSibling(item));\r\n            if (!movable) {\r\n              return;\r\n            }\r\n\r\n            return {\r\n              item: item,\r\n              source: source\r\n            };\r\n        },\r\n\r\n        canMove : function  (item) {\r\n            return !! this.canStart(item);\r\n        },\r\n\r\n        manualStart : function (item) {\r\n            var context = this.canStart(item);\r\n            if (context) {\r\n                this.start(context);\r\n            }\r\n        },\r\n\r\n        start : function(context) {\r\n            if (this.isCopy(context.item, context.source)) {\r\n              this._copy = context.item.cloneNode(true);\r\n              this.emit('cloned', this._copy, context.item, 'copy');\r\n            }\r\n\r\n            this._source = context.source;\r\n            this._item = context.item;\r\n            this._initialSibling = this._currentSibling = finder.nextSibling(context.item);\r\n\r\n            this.dragging = true;\r\n            this.emit('drag', this._item, this._source);\r\n        },\r\n\r\n        over : function(clientX,clientY) {\r\n            var o = this.options,\r\n                item = this._copy || this._item,\r\n                self = this;\r\n\r\n\r\n            var elementBehindCursor = noder.fromPoint( clientX, clientY);\r\n            var dropTarget = this.findDropTarget(clientX, clientY);\r\n            var changed = dropTarget !== null && dropTarget !== this._lastDropTarget;\r\n            if (changed || dropTarget === null) {\r\n              out();\r\n              this._lastDropTarget = dropTarget;\r\n              over();\r\n            }\r\n            var parent = finder.parent(item);\r\n            if (dropTarget === this._source && this._copy && !o.copySortSource) {\r\n              if (parent) {\r\n                parent.removeChild(item);\r\n              }\r\n              return;\r\n            }\r\n\r\n            var reference;\r\n            var immediate = this.getImmediateChild(dropTarget, elementBehindCursor);\r\n            if (immediate !== null) {\r\n              reference = this.getReference(dropTarget, immediate, clientX, clientY);\r\n            } else if (o.revertOnSpill === true && !this._copy) {\r\n              reference = this._initialSibling;\r\n              dropTarget = this._source;\r\n            } else {\r\n              if (this._copy && parent) {\r\n                parent.removeChild(item);\r\n              }\r\n              return;\r\n            }\r\n            if (\r\n              (reference === null && changed) ||\r\n              reference !== item &&\r\n              reference !== finder.nextSibling(item)\r\n            ) {\r\n              this._currentSibling = reference;\r\n              dropTarget.insertBefore(item, reference);\r\n              this.emit('shadow', item, dropTarget, this._source);\r\n            }\r\n\r\n            \r\n            function moved (type) { \r\n                self.emit(type, item, self._lastDropTarget, self._source); \r\n            }\r\n            \r\n            function over () { \r\n                if (changed) { \r\n                    moved('over'); \r\n                } \r\n            }\r\n            \r\n            function out () { \r\n                if (self._lastDropTarget) { \r\n                    moved('out'); \r\n                } \r\n            }\r\n        },\r\n\r\n        end : function() {\r\n            if (!this.dragging) {\r\n              return;\r\n            }\r\n            var item = this._copy || this._item;\r\n            this.drop(item, finder.parent(item));\r\n        },\r\n\r\n        drop : function(item, target) {\r\n            var parent = finder.parent(item);\r\n            if (this._copy && this.options.copySortSource && target === this._source) {\r\n              parent.removeChild(this._item);\r\n            }\r\n            if (this.isInitialPlacement(target)) {\r\n              this.emit('cancel', item, this._source, this._source);\r\n            } else {\r\n              this.emit('drop', item, target, this._source, this._currentSibling);\r\n            }\r\n            this.cleanup();\r\n        },\r\n\r\n        remove : function () {\r\n            if (!this.dragging) {\r\n              return;\r\n            }\r\n            var item = this._copy || this._item;\r\n            var parent = finder.parent(item);\r\n            if (parent) {\r\n              parent.removeChild(item);\r\n            }\r\n            this.emit(_copy ? 'cancel' : 'remove', item, parent, this._source);\r\n            this.cleanup();\r\n        },\r\n\r\n        cancel : function  (revert) {\r\n            if (!this.dragging) {\r\n              return;\r\n            }\r\n            var o = this.options;\r\n\r\n            var reverts = arguments.length > 0 ? revert : o.revertOnSpill;\r\n            var item = this._copy || this._item;\r\n            var parent = finder.parent(item);\r\n            var initial = this.isInitialPlacement(parent);\r\n            if (initial === false && reverts) {\r\n              if (this._copy) {\r\n                if (parent) {\r\n                  parent.removeChild(this._copy);\r\n                }\r\n              } else {\r\n                this._source.insertBefore(item, this._initialSibling);\r\n              }\r\n            }\r\n            if (initial || reverts) {\r\n              this.emit('cancel', item, this._source, this._source);\r\n            } else {\r\n              this.emit('drop', item, parent, this._source, this._currentSibling);\r\n            }\r\n            this.cleanup();\r\n        },\r\n\r\n        cleanup : function  () {\r\n            var item = this._copy || this._item;\r\n            ///ungrab();\r\n            ///removeMirrorImage();\r\n            if (item) {\r\n              styler.removeClass(item, 'gu-transit');\r\n            }\r\n            if (this._renderTimer) {\r\n              clearTimeout(_renderTimer);\r\n            }\r\n            this.dragging = false;\r\n            if (this._lastDropTarget) {\r\n              this.emit('out', item, this._lastDropTarget, this._source);\r\n            }\r\n            this.emit('dragend', item);\r\n\r\n            this._source = \r\n            this._item = \r\n            this._copy = \r\n            this._initialSibling = \r\n            this._currentSibling = \r\n            this._renderTimer = \r\n            this._lastDropTarget = null;\r\n        }\r\n\r\n\r\n    });\r\n\r\n    \r\n    return Drake;\r\n});\ndefine('skylark-dragula/dragula',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-devices-points/mouse\",\r\n  \"skylark-devices-points/touch\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-finder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-plugins-dnd/draggable\",\r\n  \"skylark-domx-plugins-dnd/droppable\",\r\n  \"./_drake\"\r\n],function(\r\n  skylark,\r\n  mouse,\r\n  touch,\r\n  noder,\r\n  finder,\r\n  geom,\r\n  eventer,\r\n  styler,\r\n  DndDraggable,\r\n  DndDroppable,\r\n  Drake\r\n){\r\n\r\n    'use strict';\r\n\r\n\r\n    function dragula (initialContainers, options) {\r\n      var len = arguments.length;\r\n      if (len === 1 && Array.isArray(initialContainers) === false) {\r\n        options = initialContainers;\r\n        initialContainers = [];\r\n      }\r\n\r\n      var o = options || {};\r\n      if (o.moves === void 0) { o.moves = always; }\r\n      if (o.accepts === void 0) { o.accepts = always; }\r\n      if (o.invalid === void 0) { o.invalid = invalidTarget; }\r\n      if (o.containers === void 0) { o.containers = initialContainers || []; }\r\n      if (o.isContainer === void 0) { o.isContainer = never; }\r\n      if (o.copy === void 0) { o.copy = false; }\r\n      if (o.copySortSource === void 0) { o.copySortSource = false; }\r\n      if (o.revertOnSpill === void 0) { o.revertOnSpill = false; }\r\n      if (o.removeOnSpill === void 0) { o.removeOnSpill = false; }\r\n      if (o.direction === void 0) { o.direction = 'vertical'; }\r\n      if (o.ignoreInputTextSelection === void 0) { o.ignoreInputTextSelection = true; }\r\n      if (o.mirrorContainer === void 0) { o.mirrorContainer = noder.body(); }\r\n\r\n      o.destroy = destroy;\r\n      var drake = new Drake(o);\r\n\r\n      if (o.removeOnSpill === true) {\r\n        drake.on('over', spillOver).on('out', spillOut);\r\n      }\r\n\r\n\r\n\r\n      ///var listener = listen(drake,o);\r\n      ///listener.events();\r\n\r\n\r\n\r\n      var _context;\r\n\r\n      drake.draggable = new  DndDraggable(noder.body(),{\r\n            ///source : options.items,\r\n            ///handle : options.handle,\r\n            ///draggingClass : options.draggingClass,\r\n            preparing : function(e) {\r\n                _context = drake.canStart(e.originalEvent.target);\r\n                if (_context) {\r\n                  e.dragSource = _context.item;\r\n                } else {\r\n                  e.dragSource = null;\r\n                }\r\n            },\r\n            started :function(e) {\r\n                e.ghost = e.dragSource;\r\n                drake.start(_context);\r\n\r\n            },\r\n            ended : function(e) {\r\n               drake.end();\r\n               _context = null;              \r\n            },\r\n            drake\r\n        });\r\n\r\n        \r\n        drake.droppable = new DndDroppable(noder.body(),{\r\n            started: function(e) {\r\n                if (e.dragging === drake.draggable) {\r\n                  e.acceptable = true;\r\n                  e.activeClass = \"active\";\r\n                  e.hoverClass = \"over\";                 \r\n                }\r\n            },\r\n            overing : function(e) {\r\n              drake.over(e.originalEvent.clientX,e.originalEvent.clientY);\r\n            },\r\n            dropped : function(e) {\r\n              //drake.end();\r\n            },\r\n            drake\r\n\r\n        });\r\n      return drake;\r\n\r\n   \r\n\r\n      function destroy () {\r\n        ///listener.events(true);\r\n        ///listener.release({});\r\n      }\r\n\r\n      function never () { \r\n        return false; \r\n      }\r\n      function always () { \r\n        return true; \r\n      }\r\n\r\n      function invalidTarget () {\r\n        return false;\r\n      }\r\n\r\n\r\n      function spillOver (el) {\r\n        styler.removeClass(el, 'gu-hide');\r\n      }\r\n\r\n      function spillOut (el) {\r\n        if (drake.dragging) { styler.addClass(el, 'gu-hide'); }\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n    return skylark.attach(\"intg.dragula\",dragula);\r\n\r\n});\r\n\ndefine('skylark-dragula/main',[\r\n\t\"./dragula\"\r\n],function(dragula){\r\n\treturn dragula;\r\n});\ndefine('skylark-dragula', ['skylark-dragula/main'], function (main) { return main; });\n\n"]}