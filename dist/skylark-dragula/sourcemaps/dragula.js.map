{"version":3,"sources":["dragula.js"],"names":["define","skylark","mouse","touch","noder","finder","geom","eventer","styler","DndDraggable","DndDroppable","Drake","attach","initialContainers","options","arguments","length","Array","isArray","o","moves","always","accepts","invalid","containers","isContainer","copy","copySortSource","revertOnSpill","removeOnSpill","direction","ignoreInputTextSelection","mirrorContainer","body","destroy","_context","drake","on","el","removeClass","dragging","addClass","draggable","preparing","e","canStart","originalEvent","target","dragSource","item","started","ghost","start","ended","end","droppable","acceptable","activeClass","hoverClass","overing","over","clientX","clientY","dropped"],"mappings":";;;;;;;AAAAA,QACE,wBACA,+BACA,+BACA,qBACA,sBACA,oBACA,uBACA,sBACA,qCACA,qCACA,YACA,SACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGE,aAmHA,OAAOV,EAAQW,OAAO,eAhHtB,SAAkBC,EAAmBC,GAEvB,IADFC,UAAUC,SACkC,IAArCC,MAAMC,QAAQL,KAC7BC,EAAUD,EACVA,MAGF,IAAIM,EAAIL,WACQ,IAAZK,EAAEC,QAAoBD,EAAEC,MAAQC,QAClB,IAAdF,EAAEG,UAAsBH,EAAEG,QAAUD,QACtB,IAAdF,EAAEI,UAAsBJ,EAAEI,QAqF9B,WACE,OAAO,SArFY,IAAjBJ,EAAEK,aAAyBL,EAAEK,WAAaX,YACxB,IAAlBM,EAAEM,cAA0BN,EAAEM,YA4ElC,WACE,OAAO,SA5EM,IAAXN,EAAEO,OAAmBP,EAAEO,MAAO,QACT,IAArBP,EAAEQ,iBAA6BR,EAAEQ,gBAAiB,QAC9B,IAApBR,EAAES,gBAA4BT,EAAES,eAAgB,QAC5B,IAApBT,EAAEU,gBAA4BV,EAAEU,eAAgB,QAChC,IAAhBV,EAAEW,YAAwBX,EAAEW,UAAY,iBACT,IAA/BX,EAAEY,2BAAuCZ,EAAEY,0BAA2B,QAChD,IAAtBZ,EAAEa,kBAA8Bb,EAAEa,gBAAkB5B,EAAM6B,QAE9Dd,EAAEe,QA8DF,aA7DA,IAaIC,EAbAC,EAAQ,IAAIzB,EAAMQ,GAyDtB,OAvDwB,IAApBA,EAAEU,eACJO,EAAMC,GAAG,OA2EX,SAAoBC,GAClB9B,EAAO+B,YAAYD,EAAI,aA5EKD,GAAG,MA+EjC,SAAmBC,GACbF,EAAMI,UAAYhC,EAAOiC,SAASH,EAAI,aApE5CF,EAAMM,UAAY,IAAKjC,EAAaL,EAAM6B,QAIpCU,UAAY,SAASC,GACjBT,EAAWC,EAAMS,SAASD,EAAEE,cAAcC,QAExCH,EAAEI,WADAb,EACaA,EAASc,KAET,MAGrBC,QAAS,SAASN,GACdA,EAAEO,MAAQP,EAAEI,WACZZ,EAAMgB,MAAMjB,IAGhBkB,MAAQ,SAAST,GACdR,EAAMkB,MACNnB,EAAW,MAEdC,MAAAA,IAIJA,EAAMmB,UAAY,IAAI7C,EAAaN,EAAM6B,QACrCiB,QAAS,SAASN,GACVA,EAAEJ,WAAaJ,EAAMM,YACvBE,EAAEY,YAAa,EACfZ,EAAEa,YAAc,SAChBb,EAAEc,WAAa,SAGrBC,QAAU,SAASf,GACjBR,EAAMwB,KAAKhB,EAAEE,cAAce,QAAQjB,EAAEE,cAAcgB,UAErDC,QAAU,SAASnB,KAGnBR,MAAAA,IAGCA,EAYP,SAASf,IACP,OAAO","file":"../dragula.js","sourcesContent":["define([\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-devices-points/mouse\",\r\n  \"skylark-devices-points/touch\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-finder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-plugins-dnd/draggable\",\r\n  \"skylark-domx-plugins-dnd/droppable\",\r\n  \"./_drake\"\r\n],function(\r\n  skylark,\r\n  mouse,\r\n  touch,\r\n  noder,\r\n  finder,\r\n  geom,\r\n  eventer,\r\n  styler,\r\n  DndDraggable,\r\n  DndDroppable,\r\n  Drake\r\n){\r\n\r\n    'use strict';\r\n\r\n\r\n    function dragula (initialContainers, options) {\r\n      var len = arguments.length;\r\n      if (len === 1 && Array.isArray(initialContainers) === false) {\r\n        options = initialContainers;\r\n        initialContainers = [];\r\n      }\r\n\r\n      var o = options || {};\r\n      if (o.moves === void 0) { o.moves = always; }\r\n      if (o.accepts === void 0) { o.accepts = always; }\r\n      if (o.invalid === void 0) { o.invalid = invalidTarget; }\r\n      if (o.containers === void 0) { o.containers = initialContainers || []; }\r\n      if (o.isContainer === void 0) { o.isContainer = never; }\r\n      if (o.copy === void 0) { o.copy = false; }\r\n      if (o.copySortSource === void 0) { o.copySortSource = false; }\r\n      if (o.revertOnSpill === void 0) { o.revertOnSpill = false; }\r\n      if (o.removeOnSpill === void 0) { o.removeOnSpill = false; }\r\n      if (o.direction === void 0) { o.direction = 'vertical'; }\r\n      if (o.ignoreInputTextSelection === void 0) { o.ignoreInputTextSelection = true; }\r\n      if (o.mirrorContainer === void 0) { o.mirrorContainer = noder.body(); }\r\n\r\n      o.destroy = destroy;\r\n      var drake = new Drake(o);\r\n\r\n      if (o.removeOnSpill === true) {\r\n        drake.on('over', spillOver).on('out', spillOut);\r\n      }\r\n\r\n\r\n\r\n      ///var listener = listen(drake,o);\r\n      ///listener.events();\r\n\r\n\r\n\r\n      var _context;\r\n\r\n      drake.draggable = new  DndDraggable(noder.body(),{\r\n            ///source : options.items,\r\n            ///handle : options.handle,\r\n            ///draggingClass : options.draggingClass,\r\n            preparing : function(e) {\r\n                _context = drake.canStart(e.originalEvent.target);\r\n                if (_context) {\r\n                  e.dragSource = _context.item;\r\n                } else {\r\n                  e.dragSource = null;\r\n                }\r\n            },\r\n            started :function(e) {\r\n                e.ghost = e.dragSource;\r\n                drake.start(_context);\r\n\r\n            },\r\n            ended : function(e) {\r\n               drake.end();\r\n               _context = null;              \r\n            },\r\n            drake\r\n        });\r\n\r\n        \r\n        drake.droppable = new DndDroppable(noder.body(),{\r\n            started: function(e) {\r\n                if (e.dragging === drake.draggable) {\r\n                  e.acceptable = true;\r\n                  e.activeClass = \"active\";\r\n                  e.hoverClass = \"over\";                 \r\n                }\r\n            },\r\n            overing : function(e) {\r\n              drake.over(e.originalEvent.clientX,e.originalEvent.clientY);\r\n            },\r\n            dropped : function(e) {\r\n              //drake.end();\r\n            },\r\n            drake\r\n\r\n        });\r\n      return drake;\r\n\r\n   \r\n\r\n      function destroy () {\r\n        ///listener.events(true);\r\n        ///listener.release({});\r\n      }\r\n\r\n      function never () { \r\n        return false; \r\n      }\r\n      function always () { \r\n        return true; \r\n      }\r\n\r\n      function invalidTarget () {\r\n        return false;\r\n      }\r\n\r\n\r\n      function spillOver (el) {\r\n        styler.removeClass(el, 'gu-hide');\r\n      }\r\n\r\n      function spillOut (el) {\r\n        if (drake.dragging) { styler.addClass(el, 'gu-hide'); }\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n    return skylark.attach(\"intg.dragula\",dragula);\r\n\r\n});\r\n"]}