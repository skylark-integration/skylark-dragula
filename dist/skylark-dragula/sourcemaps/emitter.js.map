{"version":3,"sources":["emitter.js"],"names":["define","Emitter","inherit","_prepareArgs","e","args","init","thing","options","undefined","Object","assign","this"],"mappings":";;;;;;;AAAAA,QACI,iCACF,SAASC,GAgBP,OAdeA,EAAQC,SACnBC,aAAe,SAASC,EAAEC,GACtB,OAAOA,GAEXC,KAAO,SAASC,EAAOC,QAELC,IAAVF,IACAA,MAGJG,OAAOC,OAAOC,KAAKL","file":"../emitter.js","sourcesContent":["define([\r\n    \"skylark-langx-emitter/Emitter\"\r\n],function(Emitter){\r\n\r\n    var Emitter2 = Emitter.inherit({\r\n        _prepareArgs : function(e,args) {\r\n            return args;\r\n        },\r\n        init : function(thing, options) {\r\n            var opts = options || {};\r\n            if (thing === undefined) {\r\n                thing = {};\r\n            }\r\n\r\n            Object.assign(this,thing);\r\n        }\r\n    });\r\n\r\n    return Emitter2;\r\n});\r\n\r\n/*\r\ndefine([\r\n\t\"./atoa\",\r\n\t\"./debounce\"\r\n],function(atoa,debounce){\r\n    'use strict';\r\n\r\n\tfunction emitter(thing, options) {\r\n        var opts = options || {};\r\n        var evt = {};\r\n        if (thing === undefined) {\r\n            thing = {};\r\n        }\r\n        thing.on = function(type, fn) {\r\n            if (!evt[type]) {\r\n                evt[type] = [fn];\r\n            } else {\r\n                evt[type].push(fn);\r\n            }\r\n            return thing;\r\n        };\r\n        thing.once = function(type, fn) {\r\n            fn._once = true; // thing.off(fn) still works!\r\n            thing.on(type, fn);\r\n            return thing;\r\n        };\r\n        thing.off = function(type, fn) {\r\n            var c = arguments.length;\r\n            if (c === 1) {\r\n                delete evt[type];\r\n            } else if (c === 0) {\r\n                evt = {};\r\n            } else {\r\n                var et = evt[type];\r\n                if (!et) {\r\n                    return thing;\r\n                }\r\n                et.splice(et.indexOf(fn), 1);\r\n            }\r\n            return thing;\r\n        };\r\n        thing.emit = function() {\r\n            var args = atoa(arguments);\r\n            return thing.emitterSnapshot(args.shift()).apply(this, args);\r\n        };\r\n        thing.emitterSnapshot = function(type) {\r\n            var et = (evt[type] || []).slice(0);\r\n            return function() {\r\n                var args = atoa(arguments);\r\n                var ctx = this || thing;\r\n                if (type === 'error' && opts.throws !== false && !et.length) {\r\n                    throw args.length === 1 ? args[0] : args;\r\n                }\r\n                et.forEach(function emitter(listen) {\r\n                    if (opts.async) {\r\n                        debounce(listen, args, ctx);\r\n                    } else {\r\n                        listen.apply(ctx, args);\r\n                    }\r\n                    if (listen._once) {\r\n                        thing.off(type, listen);\r\n                    }\r\n                });\r\n                return thing;\r\n            };\r\n        };\r\n        return thing;\r\n    }\r\n\r\n    return emitter;\r\n});\r\n\r\n*/"]}